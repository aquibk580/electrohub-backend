generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GenderOptions {
  Male
  Female
  Other
}

model User {
  id        Int            @id @default(autoincrement())
  name      String
  email     String         @unique
  password  String?
  address   String?
  phone     String?
  answer    String?
  pfp       String?
  gender    GenderOptions?
  provider  String?
  orders    Order[]
  cart      Cart?
  wishlist  Wishlist?
  reviews   Review[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Seller {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String?
  address   String?
  pfp       String
  phone     String?
  answer    String?
  provider  String?
  products  Product[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  OrderConfirmed
  Shipped
  Delivered
  Cancelled
  Returned
}

enum PaymentStatus {
  Completed
  Pending
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int?
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id            Int           @id @default(autoincrement())
  orderId       Int
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     Int?
  product       Product?      @relation(fields: [productId], references: [id], onDelete: SetNull)
  sellerId      Int?
  seller        Seller?       @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  quantity      Int
  status        OrderStatus   @default(OrderConfirmed)
  paymentStatus PaymentStatus @default(Pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  @@unique([cartId, productId])
}

model Category {
  name      String    @id @unique
  imageUrl  String
  products  Product[]
  createdAt DateTime  @default(now())
}

model Wishlist {
  id              Int               @id @default(autoincrement())
  userId          Int               @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  products        Product[]         @relation("WishlistProducts")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  WishlistProduct WishlistProduct[]
}

enum ProductStatus {
  Active
  Inactive
  OutOfStock
  Discontinued
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  price           Float
  offerPercentage Int?
  stock           Int
  categoryName    String
  category        Category          @relation(fields: [categoryName], references: [name], onDelete: Restrict)
  sellerId        Int
  seller          Seller            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productInfoId   Int               @unique
  productInfo     ProductInfo       @relation(fields: [productInfoId], references: [id], onDelete: Cascade)
  reviews         Review[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  images          ProductImage[]
  wishlists       Wishlist[]        @relation("WishlistProducts")
  status          ProductStatus     @default(Active)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  WishlistProduct WishlistProduct[]
}

model WishlistProduct {
  wishlistId Int
  productId  Int

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([wishlistId, productId])
}

model ProductInfo {
  id      Int      @id @default(autoincrement())
  brand   String
  product Product? @relation
  details Json?
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BannerCarousel {
  id       Int     @id @default(autoincrement())
  title    String
  imageUrl String
  href     String
  isActive Boolean @default(true)
}

model ProductCarousel {
  id       Int     @id @default(autoincrement())
  imageUrl String
  href     String
  name     String
  price    Float
  isActive Boolean @default(true)
}

enum UserType {
  Seller
  User
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  userType  UserType @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
